// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/trade/trade.proto

package trade

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Trades service

type TradesService interface {
	// AopF2F 商家扫用户付款码
	AopF2F(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Query(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Refund(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	RefundQuery(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
}

type tradesService struct {
	c    client.Client
	name string
}

func NewTradesService(name string, c client.Client) TradesService {
	return &tradesService{
		c:    c,
		name: name,
	}
}

func (c *tradesService) AopF2F(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Trades.AopF2F", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) Query(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Trades.Query", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) Refund(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Trades.Refund", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tradesService) RefundQuery(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "Trades.RefundQuery", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Trades service

type TradesHandler interface {
	// AopF2F 商家扫用户付款码
	AopF2F(context.Context, *Request, *Response) error
	Query(context.Context, *Request, *Response) error
	Refund(context.Context, *Request, *Response) error
	RefundQuery(context.Context, *Request, *Response) error
}

func RegisterTradesHandler(s server.Server, hdlr TradesHandler, opts ...server.HandlerOption) error {
	type trades interface {
		AopF2F(ctx context.Context, in *Request, out *Response) error
		Query(ctx context.Context, in *Request, out *Response) error
		Refund(ctx context.Context, in *Request, out *Response) error
		RefundQuery(ctx context.Context, in *Request, out *Response) error
	}
	type Trades struct {
		trades
	}
	h := &tradesHandler{hdlr}
	return s.Handle(s.NewHandler(&Trades{h}, opts...))
}

type tradesHandler struct {
	TradesHandler
}

func (h *tradesHandler) AopF2F(ctx context.Context, in *Request, out *Response) error {
	return h.TradesHandler.AopF2F(ctx, in, out)
}

func (h *tradesHandler) Query(ctx context.Context, in *Request, out *Response) error {
	return h.TradesHandler.Query(ctx, in, out)
}

func (h *tradesHandler) Refund(ctx context.Context, in *Request, out *Response) error {
	return h.TradesHandler.Refund(ctx, in, out)
}

func (h *tradesHandler) RefundQuery(ctx context.Context, in *Request, out *Response) error {
	return h.TradesHandler.RefundQuery(ctx, in, out)
}
