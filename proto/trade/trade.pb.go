// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/trade/trade.proto

package trade

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

// 请求参数
type BizContent struct {
	Channel     string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	AuthCode    string `protobuf:"bytes,2,opt,name=auth_code,json=authCode,proto3" json:"auth_code,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	OutTradeNo  string `protobuf:"bytes,4,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	OutRefundNo string `protobuf:"bytes,5,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
	TotalFee    int64  `protobuf:"varint,6,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	RefundFee   int64  `protobuf:"varint,7,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	OperatorId  string `protobuf:"bytes,8,opt,name=operator_id,json=operatorId,proto3" json:"operator_id,omitempty"`
	TerminalId  string `protobuf:"bytes,9,opt,name=terminal_id,json=terminalId,proto3" json:"terminal_id,omitempty"`
	Attach      string `protobuf:"bytes,10,opt,name=attach,proto3" json:"attach,omitempty"`
}

func (m *BizContent) Reset()         { *m = BizContent{} }
func (m *BizContent) String() string { return proto.CompactTextString(m) }
func (*BizContent) ProtoMessage()    {}
func (*BizContent) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeea254ae72e2035, []int{0}
}
func (m *BizContent) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BizContent) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BizContent.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BizContent) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BizContent.Merge(m, src)
}
func (m *BizContent) XXX_Size() int {
	return m.Size()
}
func (m *BizContent) XXX_DiscardUnknown() {
	xxx_messageInfo_BizContent.DiscardUnknown(m)
}

var xxx_messageInfo_BizContent proto.InternalMessageInfo

func (m *BizContent) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *BizContent) GetAuthCode() string {
	if m != nil {
		return m.AuthCode
	}
	return ""
}

func (m *BizContent) GetTitle() string {
	if m != nil {
		return m.Title
	}
	return ""
}

func (m *BizContent) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *BizContent) GetOutRefundNo() string {
	if m != nil {
		return m.OutRefundNo
	}
	return ""
}

func (m *BizContent) GetTotalFee() int64 {
	if m != nil {
		return m.TotalFee
	}
	return 0
}

func (m *BizContent) GetRefundFee() int64 {
	if m != nil {
		return m.RefundFee
	}
	return 0
}

func (m *BizContent) GetOperatorId() string {
	if m != nil {
		return m.OperatorId
	}
	return ""
}

func (m *BizContent) GetTerminalId() string {
	if m != nil {
		return m.TerminalId
	}
	return ""
}

func (m *BizContent) GetAttach() string {
	if m != nil {
		return m.Attach
	}
	return ""
}

// 公共请求参数
type Request struct {
	StoreId    string      `protobuf:"bytes,1,opt,name=store_id,json=storeId,proto3" json:"store_id,omitempty"`
	BizContent *BizContent `protobuf:"bytes,3,opt,name=biz_content,json=bizContent,proto3" json:"biz_content,omitempty"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeea254ae72e2035, []int{1}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Request.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return m.Size()
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetStoreId() string {
	if m != nil {
		return m.StoreId
	}
	return ""
}

func (m *Request) GetBizContent() *BizContent {
	if m != nil {
		return m.BizContent
	}
	return nil
}

// 退款订单
type Refund struct {
	OutTradeNo string `protobuf:"bytes,1,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	TotalFee   string `protobuf:"bytes,2,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	RefundFee  string `protobuf:"bytes,3,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	Status     string `protobuf:"bytes,4,opt,name=status,proto3" json:"status,omitempty"`
}

func (m *Refund) Reset()         { *m = Refund{} }
func (m *Refund) String() string { return proto.CompactTextString(m) }
func (*Refund) ProtoMessage()    {}
func (*Refund) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeea254ae72e2035, []int{2}
}
func (m *Refund) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Refund) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Refund.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Refund) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Refund.Merge(m, src)
}
func (m *Refund) XXX_Size() int {
	return m.Size()
}
func (m *Refund) XXX_DiscardUnknown() {
	xxx_messageInfo_Refund.DiscardUnknown(m)
}

var xxx_messageInfo_Refund proto.InternalMessageInfo

func (m *Refund) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *Refund) GetTotalFee() string {
	if m != nil {
		return m.TotalFee
	}
	return ""
}

func (m *Refund) GetRefundFee() string {
	if m != nil {
		return m.RefundFee
	}
	return ""
}

func (m *Refund) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

// 响应参数
type Content struct {
	ReturnCode         string    `protobuf:"bytes,1,opt,name=return_code,json=returnCode,proto3" json:"return_code,omitempty"`
	ReturnMsg          string    `protobuf:"bytes,2,opt,name=return_msg,json=returnMsg,proto3" json:"return_msg,omitempty"`
	Channel            string    `protobuf:"bytes,3,opt,name=channel,proto3" json:"channel,omitempty"`
	OutTradeNo         string    `protobuf:"bytes,4,opt,name=out_trade_no,json=outTradeNo,proto3" json:"out_trade_no,omitempty"`
	OutRefundNo        string    `protobuf:"bytes,5,opt,name=out_refund_no,json=outRefundNo,proto3" json:"out_refund_no,omitempty"`
	TradeNo            string    `protobuf:"bytes,6,opt,name=trade_no,json=tradeNo,proto3" json:"trade_no,omitempty"`
	TotalFee           int64     `protobuf:"varint,7,opt,name=total_fee,json=totalFee,proto3" json:"total_fee,omitempty"`
	RefundFee          int64     `protobuf:"varint,8,opt,name=refund_fee,json=refundFee,proto3" json:"refund_fee,omitempty"`
	Status             string    `protobuf:"bytes,9,opt,name=status,proto3" json:"status,omitempty"`
	TimeEnd            string    `protobuf:"bytes,10,opt,name=time_end,json=timeEnd,proto3" json:"time_end,omitempty"`
	Content            string    `protobuf:"bytes,11,opt,name=content,proto3" json:"content,omitempty"`
	WechatOpenId       string    `protobuf:"bytes,12,opt,name=wechat_open_id,json=wechatOpenId,proto3" json:"wechat_open_id,omitempty"`
	WechatIsSubscribe  string    `protobuf:"bytes,13,opt,name=wechat_is_subscribe,json=wechatIsSubscribe,proto3" json:"wechat_is_subscribe,omitempty"`
	AlipayBuyerLogonId string    `protobuf:"bytes,14,opt,name=alipay_buyer_logon_id,json=alipayBuyerLogonId,proto3" json:"alipay_buyer_logon_id,omitempty"`
	AlipayBuyerUserId  string    `protobuf:"bytes,15,opt,name=alipay_buyer_user_id,json=alipayBuyerUserId,proto3" json:"alipay_buyer_user_id,omitempty"`
	RefundList         []*Refund `protobuf:"bytes,16,rep,name=refund_list,json=refundList,proto3" json:"refund_list,omitempty"`
}

func (m *Content) Reset()         { *m = Content{} }
func (m *Content) String() string { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()    {}
func (*Content) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeea254ae72e2035, []int{3}
}
func (m *Content) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Content) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Content.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Content) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Content.Merge(m, src)
}
func (m *Content) XXX_Size() int {
	return m.Size()
}
func (m *Content) XXX_DiscardUnknown() {
	xxx_messageInfo_Content.DiscardUnknown(m)
}

var xxx_messageInfo_Content proto.InternalMessageInfo

func (m *Content) GetReturnCode() string {
	if m != nil {
		return m.ReturnCode
	}
	return ""
}

func (m *Content) GetReturnMsg() string {
	if m != nil {
		return m.ReturnMsg
	}
	return ""
}

func (m *Content) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *Content) GetOutTradeNo() string {
	if m != nil {
		return m.OutTradeNo
	}
	return ""
}

func (m *Content) GetOutRefundNo() string {
	if m != nil {
		return m.OutRefundNo
	}
	return ""
}

func (m *Content) GetTradeNo() string {
	if m != nil {
		return m.TradeNo
	}
	return ""
}

func (m *Content) GetTotalFee() int64 {
	if m != nil {
		return m.TotalFee
	}
	return 0
}

func (m *Content) GetRefundFee() int64 {
	if m != nil {
		return m.RefundFee
	}
	return 0
}

func (m *Content) GetStatus() string {
	if m != nil {
		return m.Status
	}
	return ""
}

func (m *Content) GetTimeEnd() string {
	if m != nil {
		return m.TimeEnd
	}
	return ""
}

func (m *Content) GetContent() string {
	if m != nil {
		return m.Content
	}
	return ""
}

func (m *Content) GetWechatOpenId() string {
	if m != nil {
		return m.WechatOpenId
	}
	return ""
}

func (m *Content) GetWechatIsSubscribe() string {
	if m != nil {
		return m.WechatIsSubscribe
	}
	return ""
}

func (m *Content) GetAlipayBuyerLogonId() string {
	if m != nil {
		return m.AlipayBuyerLogonId
	}
	return ""
}

func (m *Content) GetAlipayBuyerUserId() string {
	if m != nil {
		return m.AlipayBuyerUserId
	}
	return ""
}

func (m *Content) GetRefundList() []*Refund {
	if m != nil {
		return m.RefundList
	}
	return nil
}

// 公共响应参数
type Response struct {
	Sign    string   `protobuf:"bytes,1,opt,name=sign,proto3" json:"sign,omitempty"`
	Content *Content `protobuf:"bytes,2,opt,name=content,proto3" json:"content,omitempty"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_aeea254ae72e2035, []int{4}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Response.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return m.Size()
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetSign() string {
	if m != nil {
		return m.Sign
	}
	return ""
}

func (m *Response) GetContent() *Content {
	if m != nil {
		return m.Content
	}
	return nil
}

func init() {
	proto.RegisterType((*BizContent)(nil), "trade.BizContent")
	proto.RegisterType((*Request)(nil), "trade.Request")
	proto.RegisterType((*Refund)(nil), "trade.Refund")
	proto.RegisterType((*Content)(nil), "trade.Content")
	proto.RegisterType((*Response)(nil), "trade.Response")
}

func init() { proto.RegisterFile("proto/trade/trade.proto", fileDescriptor_aeea254ae72e2035) }

var fileDescriptor_aeea254ae72e2035 = []byte{
	// 666 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xc1, 0x6e, 0xd3, 0x40,
	0x10, 0x8d, 0x9b, 0xc6, 0x71, 0xc6, 0x6d, 0x4a, 0x97, 0x52, 0x5c, 0x10, 0x69, 0x64, 0x71, 0x88,
	0xa8, 0xd4, 0x42, 0xf8, 0x02, 0x5a, 0x51, 0x11, 0xa9, 0x14, 0x61, 0x40, 0xe2, 0x66, 0x39, 0xf1,
	0x34, 0xb1, 0xe4, 0xee, 0x1a, 0xef, 0x5a, 0xa8, 0x3d, 0xf0, 0x0d, 0xfc, 0x0c, 0xe2, 0xca, 0x91,
	0x63, 0x8f, 0x1c, 0x51, 0xfb, 0x23, 0x68, 0x67, 0x37, 0x69, 0x4a, 0x01, 0xf5, 0xc0, 0x25, 0xf2,
	0xbc, 0xf7, 0x76, 0x67, 0xf7, 0xcd, 0xdb, 0xc0, 0xdd, 0xa2, 0x14, 0x4a, 0xec, 0xa8, 0x32, 0x49,
	0xd1, 0xfc, 0x6e, 0x13, 0xc2, 0x1a, 0x54, 0x84, 0x5f, 0x16, 0x00, 0x76, 0xb3, 0xd3, 0x3d, 0xc1,
	0x15, 0x72, 0xc5, 0x02, 0x68, 0x8e, 0x26, 0x09, 0xe7, 0x98, 0x07, 0x4e, 0xd7, 0xe9, 0xb5, 0xa2,
	0x69, 0xc9, 0xee, 0x43, 0x2b, 0xa9, 0xd4, 0x24, 0x1e, 0x89, 0x14, 0x83, 0x05, 0xe2, 0x3c, 0x0d,
	0xec, 0x89, 0x14, 0xd9, 0x1a, 0x34, 0x54, 0xa6, 0x72, 0x0c, 0xea, 0x44, 0x98, 0x82, 0x75, 0x61,
	0x49, 0x54, 0x2a, 0xa6, 0x46, 0x31, 0x17, 0xc1, 0x22, 0x91, 0x20, 0x2a, 0xf5, 0x56, 0x43, 0x87,
	0x82, 0x85, 0xb0, 0xac, 0x15, 0x25, 0x1e, 0x55, 0x3c, 0xd5, 0x92, 0x06, 0x49, 0x7c, 0x51, 0xa9,
	0x88, 0xb0, 0x43, 0xa1, 0x1b, 0x2b, 0xa1, 0x92, 0x3c, 0x3e, 0x42, 0x0c, 0xdc, 0xae, 0xd3, 0xab,
	0x47, 0x1e, 0x01, 0xfb, 0x88, 0xec, 0x01, 0x80, 0x5d, 0xac, 0xd9, 0x26, 0xb1, 0x2d, 0x83, 0x68,
	0x7a, 0x13, 0x7c, 0x51, 0x60, 0x99, 0x28, 0x51, 0xc6, 0x59, 0x1a, 0x78, 0xf6, 0x00, 0x16, 0x1a,
	0xa4, 0x5a, 0xa0, 0xb0, 0x3c, 0xce, 0x78, 0x92, 0x6b, 0x41, 0xcb, 0x08, 0xa6, 0xd0, 0x20, 0x65,
	0xeb, 0xe0, 0x26, 0x4a, 0x25, 0xa3, 0x49, 0x00, 0xc4, 0xd9, 0x2a, 0x7c, 0x0f, 0xcd, 0x08, 0x3f,
	0x54, 0x28, 0x15, 0xdb, 0x00, 0x4f, 0x2a, 0x51, 0xa2, 0xde, 0xc0, 0x9a, 0x46, 0xf5, 0x20, 0x65,
	0x7d, 0xf0, 0x87, 0xd9, 0x69, 0x3c, 0x32, 0xee, 0x92, 0x3b, 0x7e, 0x7f, 0x75, 0xdb, 0xcc, 0xe1,
	0xd2, 0xf6, 0x08, 0x86, 0xb3, 0xef, 0xf0, 0x13, 0xb8, 0xe6, 0xee, 0xd7, 0xfc, 0x73, 0xae, 0xf9,
	0x77, 0xc5, 0x1b, 0x3b, 0x94, 0xbf, 0x78, 0x63, 0x26, 0x33, 0xe7, 0xcd, 0x3a, 0xb8, 0x52, 0x25,
	0xaa, 0x92, 0x76, 0x2e, 0xb6, 0x0a, 0xbf, 0x2e, 0x42, 0x73, 0x1a, 0x87, 0x4d, 0xf0, 0x4b, 0x54,
	0x55, 0xc9, 0xcd, 0xd8, 0xed, 0x01, 0x0c, 0x44, 0x83, 0xa7, 0x1e, 0x24, 0x38, 0x96, 0x63, 0x7b,
	0x82, 0x96, 0x41, 0x5e, 0xca, 0xf1, 0x7c, 0x9c, 0xea, 0x57, 0xe3, 0xf4, 0x7f, 0xb2, 0xb1, 0x01,
	0xde, 0x6c, 0x07, 0xd7, 0x34, 0x50, 0x7f, 0xb2, 0xa6, 0xf9, 0xcf, 0xd8, 0x78, 0xbf, 0xc7, 0xe6,
	0xd2, 0x9a, 0xd6, 0xbc, 0x35, 0xd4, 0x2e, 0x3b, 0xc6, 0x18, 0x79, 0x6a, 0xe3, 0xd0, 0xd4, 0xf5,
	0x73, 0x9e, 0xd2, 0x4d, 0xed, 0x94, 0x7d, 0x7b, 0x53, 0xeb, 0xe1, 0x43, 0x68, 0x7f, 0xc4, 0xd1,
	0x24, 0x51, 0xb1, 0x28, 0x90, 0xeb, 0x90, 0x2c, 0x91, 0x60, 0xc9, 0xa0, 0xaf, 0x0a, 0xe4, 0x83,
	0x94, 0x6d, 0xc3, 0x6d, 0xab, 0xca, 0x64, 0x2c, 0xab, 0xa1, 0x1c, 0x95, 0xd9, 0x10, 0x83, 0x65,
	0x92, 0xae, 0x1a, 0x6a, 0x20, 0xdf, 0x4c, 0x09, 0xf6, 0x04, 0xee, 0x24, 0x79, 0x56, 0x24, 0x27,
	0xf1, 0xb0, 0x3a, 0xc1, 0x32, 0xce, 0xc5, 0x58, 0xd0, 0xe6, 0x6d, 0x5a, 0xc1, 0x0c, 0xb9, 0xab,
	0xb9, 0x03, 0x4d, 0x0d, 0x52, 0xb6, 0x03, 0x6b, 0x57, 0x96, 0x54, 0x12, 0xe9, 0x55, 0xac, 0x98,
	0x1e, 0x73, 0x2b, 0xde, 0x49, 0x2c, 0xe9, 0x4c, 0xbe, 0x75, 0x29, 0xcf, 0xa4, 0x0a, 0x6e, 0x75,
	0xeb, 0x3d, 0xbf, 0xbf, 0x6c, 0xd3, 0x6b, 0x66, 0x10, 0x59, 0x1f, 0x0f, 0x32, 0xa9, 0xc2, 0x17,
	0xe0, 0x45, 0x28, 0x0b, 0xc1, 0x25, 0x32, 0x06, 0x8b, 0x32, 0x1b, 0x73, 0x1b, 0x19, 0xfa, 0x66,
	0xbd, 0x4b, 0x8f, 0x16, 0xe8, 0x25, 0xb4, 0xed, 0x5e, 0xd3, 0x67, 0x30, 0xa5, 0xfb, 0xdf, 0x1c,
	0x70, 0x29, 0x07, 0x92, 0x6d, 0x81, 0xfb, 0x4c, 0x14, 0xfb, 0xfd, 0x7d, 0xd6, 0x9e, 0x75, 0xa6,
	0x77, 0x77, 0x6f, 0x65, 0x56, 0x9b, 0x9e, 0x61, 0x8d, 0x3d, 0x82, 0xc6, 0xeb, 0x0a, 0xcb, 0x93,
	0x9b, 0x68, 0xb7, 0x66, 0xef, 0xec, 0x06, 0xe2, 0xc7, 0xe0, 0x1b, 0xf1, 0x4d, 0xb7, 0xdf, 0x0d,
	0xbe, 0x9f, 0x77, 0x9c, 0xb3, 0xf3, 0x8e, 0xf3, 0xf3, 0xbc, 0xe3, 0x7c, 0xbe, 0xe8, 0xd4, 0xce,
	0x2e, 0x3a, 0xb5, 0x1f, 0x17, 0x9d, 0xda, 0xd0, 0xa5, 0x3f, 0xe0, 0xa7, 0xbf, 0x02, 0x00, 0x00,
	0xff, 0xff, 0xb2, 0x86, 0x08, 0xcb, 0x9b, 0x05, 0x00, 0x00,
}

func (m *BizContent) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BizContent) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BizContent) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Attach) > 0 {
		i -= len(m.Attach)
		copy(dAtA[i:], m.Attach)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Attach)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.TerminalId) > 0 {
		i -= len(m.TerminalId)
		copy(dAtA[i:], m.TerminalId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.TerminalId)))
		i--
		dAtA[i] = 0x4a
	}
	if len(m.OperatorId) > 0 {
		i -= len(m.OperatorId)
		copy(dAtA[i:], m.OperatorId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OperatorId)))
		i--
		dAtA[i] = 0x42
	}
	if m.RefundFee != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.RefundFee))
		i--
		dAtA[i] = 0x38
	}
	if m.TotalFee != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.TotalFee))
		i--
		dAtA[i] = 0x30
	}
	if len(m.OutRefundNo) > 0 {
		i -= len(m.OutRefundNo)
		copy(dAtA[i:], m.OutRefundNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OutRefundNo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OutTradeNo) > 0 {
		i -= len(m.OutTradeNo)
		copy(dAtA[i:], m.OutTradeNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OutTradeNo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Title) > 0 {
		i -= len(m.Title)
		copy(dAtA[i:], m.Title)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Title)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AuthCode) > 0 {
		i -= len(m.AuthCode)
		copy(dAtA[i:], m.AuthCode)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.AuthCode)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Request) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Request) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Request) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BizContent != nil {
		{
			size, err := m.BizContent.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrade(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.StoreId) > 0 {
		i -= len(m.StoreId)
		copy(dAtA[i:], m.StoreId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.StoreId)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Refund) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Refund) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Refund) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.RefundFee) > 0 {
		i -= len(m.RefundFee)
		copy(dAtA[i:], m.RefundFee)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.RefundFee)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.TotalFee) > 0 {
		i -= len(m.TotalFee)
		copy(dAtA[i:], m.TotalFee)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.TotalFee)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.OutTradeNo) > 0 {
		i -= len(m.OutTradeNo)
		copy(dAtA[i:], m.OutTradeNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OutTradeNo)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Content) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Content) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Content) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefundList) > 0 {
		for iNdEx := len(m.RefundList) - 1; iNdEx >= 0; iNdEx-- {
			{
				size, err := m.RefundList[iNdEx].MarshalToSizedBuffer(dAtA[:i])
				if err != nil {
					return 0, err
				}
				i -= size
				i = encodeVarintTrade(dAtA, i, uint64(size))
			}
			i--
			dAtA[i] = 0x1
			i--
			dAtA[i] = 0x82
		}
	}
	if len(m.AlipayBuyerUserId) > 0 {
		i -= len(m.AlipayBuyerUserId)
		copy(dAtA[i:], m.AlipayBuyerUserId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.AlipayBuyerUserId)))
		i--
		dAtA[i] = 0x7a
	}
	if len(m.AlipayBuyerLogonId) > 0 {
		i -= len(m.AlipayBuyerLogonId)
		copy(dAtA[i:], m.AlipayBuyerLogonId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.AlipayBuyerLogonId)))
		i--
		dAtA[i] = 0x72
	}
	if len(m.WechatIsSubscribe) > 0 {
		i -= len(m.WechatIsSubscribe)
		copy(dAtA[i:], m.WechatIsSubscribe)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.WechatIsSubscribe)))
		i--
		dAtA[i] = 0x6a
	}
	if len(m.WechatOpenId) > 0 {
		i -= len(m.WechatOpenId)
		copy(dAtA[i:], m.WechatOpenId)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.WechatOpenId)))
		i--
		dAtA[i] = 0x62
	}
	if len(m.Content) > 0 {
		i -= len(m.Content)
		copy(dAtA[i:], m.Content)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Content)))
		i--
		dAtA[i] = 0x5a
	}
	if len(m.TimeEnd) > 0 {
		i -= len(m.TimeEnd)
		copy(dAtA[i:], m.TimeEnd)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.TimeEnd)))
		i--
		dAtA[i] = 0x52
	}
	if len(m.Status) > 0 {
		i -= len(m.Status)
		copy(dAtA[i:], m.Status)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Status)))
		i--
		dAtA[i] = 0x4a
	}
	if m.RefundFee != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.RefundFee))
		i--
		dAtA[i] = 0x40
	}
	if m.TotalFee != 0 {
		i = encodeVarintTrade(dAtA, i, uint64(m.TotalFee))
		i--
		dAtA[i] = 0x38
	}
	if len(m.TradeNo) > 0 {
		i -= len(m.TradeNo)
		copy(dAtA[i:], m.TradeNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.TradeNo)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.OutRefundNo) > 0 {
		i -= len(m.OutRefundNo)
		copy(dAtA[i:], m.OutRefundNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OutRefundNo)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OutTradeNo) > 0 {
		i -= len(m.OutTradeNo)
		copy(dAtA[i:], m.OutTradeNo)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.OutTradeNo)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Channel) > 0 {
		i -= len(m.Channel)
		copy(dAtA[i:], m.Channel)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Channel)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ReturnMsg) > 0 {
		i -= len(m.ReturnMsg)
		copy(dAtA[i:], m.ReturnMsg)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.ReturnMsg)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ReturnCode) > 0 {
		i -= len(m.ReturnCode)
		copy(dAtA[i:], m.ReturnCode)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.ReturnCode)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Response) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Response) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Response) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Content != nil {
		{
			size, err := m.Content.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTrade(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sign) > 0 {
		i -= len(m.Sign)
		copy(dAtA[i:], m.Sign)
		i = encodeVarintTrade(dAtA, i, uint64(len(m.Sign)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTrade(dAtA []byte, offset int, v uint64) int {
	offset -= sovTrade(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *BizContent) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.AuthCode)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.OutTradeNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.OutRefundNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.TotalFee != 0 {
		n += 1 + sovTrade(uint64(m.TotalFee))
	}
	if m.RefundFee != 0 {
		n += 1 + sovTrade(uint64(m.RefundFee))
	}
	l = len(m.OperatorId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.TerminalId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Attach)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	return n
}

func (m *Request) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.StoreId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.BizContent != nil {
		l = m.BizContent.Size()
		n += 1 + l + sovTrade(uint64(l))
	}
	return n
}

func (m *Refund) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.OutTradeNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.TotalFee)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.RefundFee)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	return n
}

func (m *Content) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ReturnCode)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.ReturnMsg)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.OutTradeNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.OutRefundNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.TradeNo)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.TotalFee != 0 {
		n += 1 + sovTrade(uint64(m.TotalFee))
	}
	if m.RefundFee != 0 {
		n += 1 + sovTrade(uint64(m.RefundFee))
	}
	l = len(m.Status)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.TimeEnd)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.Content)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.WechatOpenId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.WechatIsSubscribe)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.AlipayBuyerLogonId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	l = len(m.AlipayBuyerUserId)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if len(m.RefundList) > 0 {
		for _, e := range m.RefundList {
			l = e.Size()
			n += 2 + l + sovTrade(uint64(l))
		}
	}
	return n
}

func (m *Response) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sign)
	if l > 0 {
		n += 1 + l + sovTrade(uint64(l))
	}
	if m.Content != nil {
		l = m.Content.Size()
		n += 1 + l + sovTrade(uint64(l))
	}
	return n
}

func sovTrade(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTrade(x uint64) (n int) {
	return sovTrade(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *BizContent) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BizContent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BizContent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AuthCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRefundNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutRefundNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFee", wireType)
			}
			m.TotalFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFee", wireType)
			}
			m.RefundFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OperatorId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OperatorId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TerminalId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TerminalId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Attach", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Attach = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Request) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Request: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Request: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StoreId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StoreId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BizContent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BizContent == nil {
				m.BizContent = &BizContent{}
			}
			if err := m.BizContent.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Refund) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Refund: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Refund: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TotalFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFee", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundFee = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Content) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnCode = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReturnMsg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReturnMsg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutTradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutTradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OutRefundNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OutRefundNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TradeNo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TradeNo = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TotalFee", wireType)
			}
			m.TotalFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TotalFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundFee", wireType)
			}
			m.RefundFee = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefundFee |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Status = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeEnd", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TimeEnd = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Content = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WechatOpenId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WechatOpenId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WechatIsSubscribe", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WechatIsSubscribe = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayBuyerLogonId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlipayBuyerLogonId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AlipayBuyerUserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AlipayBuyerUserId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefundList", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefundList = append(m.RefundList, &Refund{})
			if err := m.RefundList[len(m.RefundList)-1].Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Response) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Response: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Response: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sign", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sign = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Content", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTrade
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTrade
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Content == nil {
				m.Content = &Content{}
			}
			if err := m.Content.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTrade(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthTrade
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTrade(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTrade
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTrade
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTrade
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTrade
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTrade
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTrade        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTrade          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTrade = fmt.Errorf("proto: unexpected end of group")
)
